In [1]: import h2o

In [2]: h2o.init()


No instance found at ip and port: localhost:54321. Trying to start local jar...


JVM stdout: /var/folders/wg/3qx1qchx1jsfjqqbmz3stj7c0000gn/T/tmpof5ZIZ/h2o_hank_started_from_python.out
JVM stderr: /var/folders/wg/3qx1qchx1jsfjqqbmz3stj7c0000gn/T/tmpk4uayp/h2o_hank_started_from_python.err
Using ice_root: /var/folders/wg/3qx1qchx1jsfjqqbmz3stj7c0000gn/T/tmpKy1Wmt


Java Version: java version "1.8.0_40"
Java(TM) SE Runtime Environment (build 1.8.0_40-b27)
Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)


Starting H2O JVM and connecting: ............... Connection sucessful!
--------------------------  --------------------------
H2O cluster uptime:         1 seconds 591 milliseconds
H2O cluster version:        3.2.0.5
H2O cluster name:           H2O_started_from_python
H2O cluster total nodes:    1
H2O cluster total memory:   3.56 GB
H2O cluster total cores:    4
H2O cluster allowed cores:  4
H2O cluster healthy:        True
H2O Connection ip:          127.0.0.1
H2O Connection port:        54321
--------------------------  --------------------------

In [3]: df = h2o.H2OFrame(zip(*((1, 2, 3),
   ...:                    ('a', 'b', 'c'),
   ...:                    (0.1, 0.2, 0.3))))

Parse Progress: [###############################] 100%
Uploaded py9bccf8ce-c01e-40c8-bc73-b8e7e0b17c6a into cluster with 3 rows and 3 cols

In [4]: df
Out[4]: H2OFrame with 3 rows and 3 columns:
  C1  C2      C3
----  ----  ----
   1  a      0.1
   2  b      0.2
   3  c      0.3

In [5]: df = h2o.H2OFrame(zip(*[[1, 2, 3],
   ...:                    ['a', 'b', 'c'],
   ...:                    [0.1, 0.2, 0.3]]))

Parse Progress: [###############################] 100%
Uploaded py2c9ccb17-a86e-47d7-be1a-a7950b338870 into cluster with 3 rows and 3 cols

In [6]: df
Out[6]: H2OFrame with 3 rows and 3 columns:
  C1  C2      C3
----  ----  ----
   1  a      0.1
   2  b      0.2
   3  c      0.3

In [7]: df = h2o.H2OFrame({'A': [1, 2, 3],
   ...:                    'B': ['a', 'b', 'c'],
   ...:                    'C': [0.1, 0.2, 0.3]})

Parse Progress: [###############################] 100%
Uploaded py2714e8a2-67c7-45a3-9d47-247120c5d931 into cluster with 3 rows and 3 cols

In [8]: df
Out[8]: H2OFrame with 3 rows and 3 columns:
  A    C  B
---  ---  ---
  1  0.1  a
  2  0.2  b
  3  0.3  c

In [14]: df2 = h2o.H2OFrame.from_python({'A': [1, 2, 3],
   ....:                                 'B': ['a', 'a', 'b'],
   ....:                                 'C': ['hello', 'all', 'world'],
   ....:                                 'D': ['12MAR2015:11:00:00', '13MAR2015:12:00:00', '14MAR2015:13:00:00']},
   ....:                                 column_types=['numeric', 'enum', 'string', 'time'])

Parse Progress: [###############################] 100%
Uploaded py17ea1f6d-ae83-451d-ad33-89e770061601 into cluster with 3 rows and 4 cols

In [10]: df2
Out[10]: H2OFrame with 3 rows and 4 columns:
  A      C  B                   D
--- ------ -- -------------------
  1  hello  a 2015-03-12 11:00:00
  2    all  a 2015-03-13 12:00:00
  3  world  b 2015-03-14 13:00:00

In [11]: df2.types
Out[11]: {u'A': u'numeric', u'B': u'string', u'C': u'enum', u'D': u'time'}

In [16]: import numpy as np

In [17]: df = h2o.H2OFrame.from_python(np.random.randn(4,100).tolist(), column_names=list('ABCD'))

Parse Progress: [###############################] 100%
Uploaded py0a4d1d8d-7d04-438a-a97f-a9521f802366 into cluster with 100 rows and 4 cols

In [18]: df.head()
H2OFrame with 100 rows and 4 columns:
        A           B           C          D
---------  ----------  ----------  ---------
-0.613035  -0.425327   -1.92774    -2.1201
-1.26552   -0.241526   -0.0445104   1.90628
 0.763851   0.0391609  -0.500049    0.355561
-1.24842    0.912686   -0.61146     1.94607
 2.1058    -1.83995     0.453875   -1.69911
 1.7635     0.573736   -0.309663   -1.51131
-0.781973   0.051883   -0.403075    0.569406
 1.40085    1.91999     0.514212   -1.47146
-0.746025  -0.632182    1.27455    -1.35006
-1.12065    0.374212    0.232229   -0.602646

In [19]: df.tail(5)
H2OFrame with 100 rows and 4 columns:
        A           B          C          D
---------  ----------  ---------  ---------
 1.00098   -1.43183    -0.322068   0.374401
 1.16553   -1.23383    -1.71742    1.01035
-1.62351   -1.13907     2.1242    -0.275453
-0.479005  -0.0048988   0.224583   0.219037
-0.74103    1.13485     0.732951   1.70306

In [20]: df.columns
Out[20]: [u'A', u'B', u'C', u'D']

In [21]: df.describe()
Rows: 100 Cols: 4

Chunk compression summary:
chunk_type     chunkname   count   count_%   size   size_%
------------   ---------   -----   -------   ----   ------
64-bit Reals    C8D       4       100     3.4 KB    100

Frame distribution summary:
                  size   #_rows   #_chunks_per_col  #_chunks
---------------  ------  ------   ---------------   --------
127.0.0.1:54321  3.4 KB  100      1                 4
mean             3.4 KB  100      1                 4
min              3.4 KB  100      1                 4
max              3.4 KB  100      1                 4
stddev           0  B    0        0                 0
total            3.4 KB  100      1                 4

Column-by-Column Summary: (floats truncatede)

          A          B          C          D
-------   --------   --------   --------   -------- 
type      real       real       real       real
mins      -2.49822   -2.37446   -2.45977   -3.48247
maxs       2.59380    1.91998    3.13014    2.39057
mean      -0.01062   -0.23159    0.11423   -0.16228
sigma      1.04354    0.90576    0.96133    1.02608
zero_count    0          0          0          0
missing_count 0          0          0          0
In [23]: df['A']
Out[23]: H2OFrame with 100 rows and 1 columns:
          A
0 -0.613035
1 -1.265520
2  0.763851
3 -1.248425
4  2.105805
5  1.763502
6 -0.781973
7  1.400853
8 -0.746025
9 -1.120648
In [24]: df[1]
Out[24]: H2OFrame with 100 rows and 1 columns:
          B
0 -0.425327
1 -0.241526
2  0.039161
3  0.912686
4 -1.839950
5  0.573736
6  0.051883
7  1.919987
8 -0.632182
9  0.374212
In [25]: df[['B','C']]
Out[25]: H2OFrame with 100 rows and 2 columns:
          B         C
0 -0.425327 -1.927737
1 -0.241526 -0.044510
2  0.039161 -0.500049
3  0.912686 -0.611460
4 -1.839950  0.453875
5  0.573736 -0.309663
6  0.051883 -0.403075
7  1.919987  0.514212
8 -0.632182  1.274552
9  0.374212  0.232229
In [26]: df[0:2]
Out[26]: H2OFrame with 100 rows and 2 columns:
          A         B
0 -0.613035 -0.425327
1 -1.265520 -0.241526
2  0.763851  0.039161
3 -1.248425  0.912686
4  2.105805 -1.839950
5  1.763502  0.573736
6 -0.781973  0.051883
7  1.400853  1.919987
8 -0.746025 -0.632182
9 -1.120648  0.374212

In [27]: df[2:7, :]
Out[27]: H2OFrame with 5 rows and 4 columns:
          A         B         C         D
0  0.763851  0.039161 -0.500049  0.355561
1 -1.248425  0.912686 -0.611460  1.946068
2  2.105805 -1.839950  0.453875 -1.699112
3  1.763502  0.573736 -0.309663 -1.511314
4 -0.781973  0.051883 -0.403075  0.569406

In [28]: df2[ df2["B"] == "a", :]
Out[28]: H2OFrame with 2 rows and 4 columns:
   A      C  B                   D
0  1  hello  a 2015-03-12 11:00:00
1  2    all  a 2015-03-13 12:00:00

In [46]: df3 = h2o.H2OFrame.from_python(
    {'A': [1, 2, 3,None,''],                          
     'B': ['a', 'a', 'b', 'NA', 'NA'],
     'C': ['hello', 'all', 'world', None, None],
     'D': ['12MAR2015:11:00:00',None,
           '13MAR2015:12:00:00',None,
           '14MAR2015:13:00:00']},   
    column_types=['numeric', 'enum', 'string', 'time'])

In [47]: df3
Out[47]: H2OFrame with 5 rows and 4 columns:
    A      C    B             D
0   1  hello    a  1.426183e+12
1   2    all    a           NaN
2   3  world    b  1.426273e+12
3 NaN    NaN  NaN           NaN
4 NaN    NaN  NaN  1.426363e+12

In [49]: df3["A"].isna()
Out[49]: H2OFrame with 5 rows and 1 columns:
   C1
0   0
1   0
2   0
3   1
4   1

In [41]: df3[ df3["A"].isna(), "A"] = 5

In [52]: df3
Out[52]: H2OFrame with 5 rows and 4 columns:
   A      C    B             D
0  1  hello    a  1.426183e+12
1  2    all    a           NaN
2  3  world    b  1.426273e+12
3  5    NaN  NaN           NaN
4  5    NaN  NaN  1.426363e+12

In [53]: df3.isna()
Out[53]: H2OFrame with 5 rows and 4 columns:
   C1  C2  C3  C4
0   0   0   0   0
1   0   0   0   1
2   0   0   0   0
3   0   1   0   1
4   0   1   0   0

In [60]: df3 = h2o.H2OFrame.from_python(
    {'A': [1, 2, 3,None,''],                          
     'B': ['a', 'a', 'b', 'NA', 'NA'],
     'C': ['hello', 'all', 'world', None, None],
     'D': ['12MAR2015:11:00:00',None,
           '13MAR2015:12:00:00',None,
           '14MAR2015:13:00:00']},   
    column_types=['numeric', 'enum', 'string', 'time'])

In [61]: df4.mean(na_rm=True)
Out[61]: [2.0, u'NaN', u'NaN', u'NaN']

In [62]: df4["A"].mean()
Out[62]: [u'NaN']

In [64]: df4["A"].mean(na_rm=True)
Out[64]: [2.0]

In [5]: df5 = h2o.H2OFrame.from_python(
          np.random.randn(4,100).tolist(), 
          column_names=list('ABCD'))
Parse Progress: [###############################] 100%

In [6]: df5.apply(lambda x: x.mean(na_rm=True))
Out[6]: H2OFrame with 1 rows and 4 columns:
          A         B         C        D
0  0.020849 -0.052978 -0.037272 -0.01664

In [26]: df5.apply(lambda row: sum(row), axis=1)
Out[26]: H2OFrame with 100 rows and 1 columns:
         C1
0  0.906854
1  0.790760
2 -0.217604
3 -0.978141
4  2.180175
5 -2.420732
6  0.875716
7 -1.077747
8  2.321706
9 -0.700436

In [49]: df6 = h2o.H2OFrame(
      np.random.randint(0, 7, size=100).tolist())

Parse Progress: [###############################] 100%
Uploaded py5b584604-73ff-4037-9618-c53122cd0343 into cluster with 100 rows and 1 cols

In [50]: df6.hist(plot=False)

Parse Progress: [###############################] 100%
Uploaded py8a993d29-e354-44cf-b10e-d97aa6fdfd74 into cluster with 8 rows and 1 cols
Out[50]: H2OFrame with 8 rows and 5 columns:
   breaks  counts  mids_true   mids   density
0    0.75     NaN        NaN    NaN  0.000000
1    1.50      10        0.0  1.125  0.116667
2    2.25       6        0.5  1.875  0.070000
3    3.00      17        1.0  2.625  0.198333
4    3.75       0        0.0  3.375  0.000000
5    4.50      16        1.5  4.125  0.186667
6    5.25      19        2.0  4.875  0.221667
7    6.00      32        2.5  5.625  0.373333

In [62]: df7 = h2o.H2OFrame.from_python(
  ['Hello', 'World', 'Welcome', 'To', 'H2O', 'World'])

In [63]: df7
Out[63]: H2OFrame with 6 rows and 1 columns:
        C1
0    Hello
1    World
2  Welcome
3       To
4      H2O
5    World

In [65]: df7.countmatches('l')
Out[65]: H2OFrame with 6 rows and 1 columns:
   C1
0   2
1   1
2   1
3   0
4   0
5   1


In [89]: df7.sub('l','x')
Out[89]: H2OFrame with 6 rows and 1 columns:
        C1
0    Hexlo
1    Worxd
2  Wexcome
3       To
4      H2O
5    Worxd

In [86]: df7.strsplit('(l)+')
Out[86]: H2OFrame with 6 rows and 2 columns:
    C1    C2
0   He     o
1  Wor     d
2   We  come
3   To   NaN
4  H2O   NaN
5  Wor     d

In [98]: df8 = h2o.H2OFrame.from_python(np.random.randn(100,4).tolist(), column_names=list('ABCD'))

Parse Progress: [###############################] 100%
Uploaded py9607f2cc-087a-4d99-ba9f-917ca852c1f2 into cluster with 100 rows and 4 cols

In [99]: df9 = h2o.H2OFrame.from_python(
            np.random.randn(100,4).tolist(), 
            column_names=list('ABCD'))

Parse Progress: [###############################] 100%
Uploaded pycb8b3aba-77d6-4383-88dd-4729f1f2c314 into cluster with 100 rows and 4 cols

In [100]: df8.rbind(df9)
Out[100]: H2OFrame with 200 rows and 4 columns:
          A         B         C         D
0 -0.095807  0.944757  0.160959  0.271681
1 -0.950010  0.669040  0.664983  1.535805
2  0.172176  0.657167  0.970337 -0.419208
3  0.589829 -0.516749 -1.598524 -1.346773
4  1.044948 -0.281243 -0.411052  0.959717
5  0.498329  0.170340  0.124479 -0.170742
6  1.422841 -0.409794 -0.525356  2.155962
7  0.944803  1.192007 -1.075689  0.017082
8 -0.539276  0.777582 -1.090965 -2.237239
9  0.346192 -0.456974 -1.220243 -0.456305

In [101]: df8.cbind(df9)
Out[101]: H2OFrame with 100 rows and 8 columns:
    A      B      C      D     A0    B0     C0    D0
0 -0.09  0.944  0.160  0.271 -0.351  1.66 -2.32 -0.86
1 -0.95  0.669  0.664  1.535 -0.633 -1.78  0.32  1.27
2  0.17  0.657  0.970 -0.419 -1.413 -0.51  0.64 -1.25
3  0.58 -0.516 -1.598 -1.346  0.711  1.09  0.05  0.63 
4  1.04 -0.281 -0.411  0.959 -0.009 -0.47  0.41 -0.52
5  0.49  0.170  0.124 -0.170 -0.722 -0.79 -0.91 -2.09
6  1.42 -0.409 -0.525  2.155 -0.841 -0.19  0.13  0.63
7  0.94  1.192 -1.075  0.017  0.167  0.54  0.52  1.42
8 -0.53  0.777 -1.090 -2.237 -0.693  0.24 -0.56  1.45
9  0.34 -0.456 -1.220 -0.456 -0.315  1.10  1.38 -0.05


In [108]: df10 = h2o.H2OFrame.from_python( { 
            'A': ['Hello', 'World', 
                  'Welcome', 'To', 
                  'H2O', 'World'],
            'n': [0,1,2,3,4,5]} )

Parse Progress: [###############################] 100%
Uploaded py57e84cb6-ce29-4d13-afe4-4333b2186c72 into cluster with 6 rows and 2 cols

In [109]: df11 = h2o.H2OFrame.from_python(np.random.randint(0, 10, size=100).tolist9), column_names=['n'])

Parse Progress: [###############################] 100%
Uploaded py090fa929-b434-43c0-81bd-b9c61b553a31 into cluster with 100 rows and 1 cols

In [112]: df11.merge(df10)
Out[112]: H2OFrame with 100 rows and 2 columns:
   n      A
0  7    NaN
1  3     To
2  0  Hello
3  9    NaN
4  9    NaN
5  3     To
6  4    H2O
7  4    H2O
8  5  World
9  4    H2O

In [123]: df12 = h2o.H2OFrame(
    {'A' : ['foo', 'bar', 'foo', 'bar',
            'foo', 'bar', 'foo', 'foo'],
     'B' : ['one', 'one', 'two', 'three',
            'two', 'two', 'one', 'three'],
     'C' : np.random.randn(8),
     'D' : np.random.randn(8)})

Parse Progress: [###############################] 100%
Uploaded pyd297bab5-4e4e-4a89-9b85-f8fecf37f264 into cluster with 8 rows and 4 cols

In [124]: df12
Out[124]: H2OFrame with 8 rows and 4 columns:
     A         C      B         D
0  foo  1.583908    one -0.441779
1  bar  1.055763    one  1.733467
2  foo -1.200572    two  0.970428
3  bar -1.066722  three -0.311055
4  foo -0.023385    two  0.077905
5  bar  0.758202    two  0.521504
6  foo  0.098259    one -1.391587
7  foo  0.412450  three -0.050374

In [125]: df12.group_by('A').sum().frame
Out[125]: H2OFrame with 2 rows and 4 columns:
     A     sum_C  sum_B     sum_D
0  bar  0.747244      3  1.943915
1  foo  0.870661      5 -0.835406






In [127]: df13 = df12.group_by(['A','B']).sum().frame

In [128]: df13
Out[128]: H2OFrame with 6 rows and 4 columns:
     A      B     sum_C     sum_D
0  bar    one  1.055763  1.733467
1  bar    two  0.758202  0.521504
2  foo  three  0.412450 -0.050374
3  foo    one  1.682168 -1.833366
4  foo    two -1.223957  1.048333
5  bar  three -1.066722 -0.311055

In [129]: df12.merge(df13)
Out[129]: H2OFrame with 8 rows and 6 columns:
     A      B         C         D     sum_C     sum_D
0  foo    one  1.583908 -0.441779  1.682168 -1.833366
1  bar    one  1.055763  1.733467  1.055763  1.733467
2  foo    two -1.200572  0.970428 -1.223957  1.048333
3  bar  three -1.066722 -0.311055 -1.066722 -0.311055
4  foo    two -0.023385  0.077905 -1.223957  1.048333
5  bar    two  0.758202  0.521504  0.758202  0.521504
6  foo    one  0.098259 -1.391587  1.682168 -1.833366
7  foo  three  0.412450 -0.050374  0.412450 -0.050374

In [140]: df14 = h2o.H2OFrame.from_python(
        {'D': ['18OCT2015:11:00:00',
               '19OCT2015:12:00:00',
               '20OCT2015:13:00:00']},
         column_types=['time'])

In [141]: df14.types
Out[141]: {u'D': u'time'}

In [142]: df14['D'].day()
Out[142]: H2OFrame with 3 rows and 1 columns:
    D
0  18
1  19
2  20

In [143]: df14['D'].dayOfWeek()
Out[143]: H2OFrame with 3 rows and 1 columns:
     D
0  Sun
1  Mon
2  Tue

In [145]: df12.types
Out[145]: {u'A': u'Enum', u'B': u'Enum', 
           u'C': u'Numeric', u'D': u'Numeric'}
In [148]: df12.anyfactor()
Out[148]: True

In [149]: df12["A"].levels()
Out[149]: ['bar', 'foo']

In [163]: df12.interaction(['A','B'], pairwise=False, max_factors=3, min_occurrence=1)

Interactions Progress: [########################] 100%
Out[163]: H2OFrame with 8 rows and 1 columns:
       A_B
0  foo_one
1  bar_one
2  foo_two
3    other
4  foo_two
5    other
6  foo_one
7    other

In [168]: bb_df = df12.interaction(['B','B'], pairwise=False, max_factors=2, min_occurrence=1)

Interactions Progress: [########################] 100%

In [169]: bb_df
Out[169]: H2OFrame with 8 rows and 1 columns:
     B_B
0    one
1    one
2    two
3  other
4    two
5    two
6    one
7  other

In [170]: df15 = df12.cbind(bb_df)

In [171]: df15
Out[171]: H2OFrame with 8 rows and 5 columns:
     A      B         C         D    B_B
0  foo    one  1.583908 -0.441779    one
1  bar    one  1.055763  1.733467    one
2  foo    two -1.200572  0.970428    two
3  bar  three -1.066722 -0.311055  other
4  foo    two -0.023385  0.077905    two
5  bar    two  0.758202  0.521504    two
6  foo    one  0.098259 -1.391587    one
7  foo  three  0.412450 -0.050374  other

In[2]: h2o.init(ip="123.45.67.89", port=54321)

#### Saving and loading files section

In[172]: df = h2o.upload_file("/pathToFile/fileName")

In[173]: df = h2o.import_file("/pathToFile/fileName")

In[174]: h2o.export_file(df,"/pathToFile/fileName")

In[175]: h2o.download_csv(df,"/pathToFile/fileName")
