{
  "model_builders": {
    "deeplearning": {
      "job": "$0301ac10025434d4ffffffff$_9229e19dd3ab53a281cf0d153ab54d53",
      "parameters": [
        {
          "name": "destination_key",
          "label": "destination_key",
          "help": "Destination key for this model; if unset they key is auto-generated.",
          "required": false,
          "type": "Key",
          "default_value": null,
          "actual_value": null,
          "level": "critical",
          "values": []
        },
        {
          "name": "training_frame",
          "label": "training_frame",
          "help": "Training frame",
          "required": false,
          "type": "Frame",
          "default_value": null,
          "actual_value": null,
          "level": "critical",
          "values": []
        },
        {
          "name": "validation_frame",
          "label": "validation_frame",
          "help": "Validation frame",
          "required": false,
          "type": "Frame",
          "default_value": null,
          "actual_value": null,
          "level": "critical",
          "values": []
        },
        {
          "name": "response_column",
          "label": "response_column",
          "help": "Response column",
          "required": false,
          "type": "string",
          "default_value": null,
          "actual_value": null,
          "level": "critical",
          "values": []
        },
        {
          "name": "ignored_columns",
          "label": "ignored_columns",
          "help": "Ignored columns",
          "required": false,
          "type": "string[]",
          "default_value": null,
          "actual_value": null,
          "level": "critical",
          "values": []
        },
        {
          "name": "n_folds",
          "label": "n_folds",
          "help": "Number of folds for n-fold cross-validation (0 to n)",
          "required": false,
          "type": "int",
          "default_value": "0",
          "actual_value": "0",
          "level": "critical",
          "values": []
        },
        {
          "name": "keep_cross_validation_splits",
          "label": "keep_cross_validation_splits",
          "help": "Keep cross-validation Frames",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "critical",
          "values": []
        },
        {
          "name": "checkpoint",
          "label": "checkpoint",
          "help": "Model checkpoint to resume training with",
          "required": false,
          "type": "Key",
          "default_value": null,
          "actual_value": null,
          "level": "critical",
          "values": []
        },
        {
          "name": "override_with_best_model",
          "label": "override_with_best_model",
          "help": "If enabled, override the final model with the best model found during training",
          "required": false,
          "type": "boolean",
          "default_value": "true",
          "actual_value": "true",
          "level": "critical",
          "values": []
        },
        {
          "name": "expert_mode",
          "label": "expert_mode",
          "help": "Enable expert mode (to access all options from GUI)",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "critical",
          "values": []
        },
        {
          "name": "autoencoder",
          "label": "autoencoder",
          "help": "Auto-Encoder (Experimental)",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "critical",
          "values": []
        },
        {
          "name": "use_all_factor_levels",
          "label": "use_all_factor_levels",
          "help": "Use all factor levels of categorical variables. Otherwise, the first factor level is omitted (without loss of accuracy). Useful for variable importances and auto-enabled for autoencoder.",
          "required": false,
          "type": "boolean",
          "default_value": "true",
          "actual_value": "true",
          "level": "secondary",
          "values": []
        },
        {
          "name": "activation",
          "label": "activation",
          "help": "Activation function",
          "required": false,
          "type": "enum",
          "default_value": "Rectifier",
          "actual_value": "Rectifier",
          "level": "critical",
          "values": [
            "Tanh",
            "TanhWithDropout",
            "Rectifier",
            "RectifierWithDropout",
            "Maxout",
            "MaxoutWithDropout"
          ]
        },
        {
          "name": "hidden",
          "label": "hidden",
          "help": "Hidden layer sizes (e.g. 100,100). Grid search: (10,10), (20,20,20)",
          "required": false,
          "type": "int[]",
          "default_value": "[200, 200]",
          "actual_value": "[200, 200]",
          "level": "critical",
          "values": []
        },
        {
          "name": "epochs",
          "label": "epochs",
          "help": "How many times the dataset should be iterated (streamed), can be fractional",
          "required": false,
          "type": "double",
          "default_value": "10.0",
          "actual_value": "10.0",
          "level": "critical",
          "values": []
        },
        {
          "name": "train_samples_per_iteration",
          "label": "train_samples_per_iteration",
          "help": "Number of training samples (globally) per MapReduce iteration. Special values are 0: one epoch, -1: all available data (e.g., replicated training data), -2: automatic",
          "required": false,
          "type": "long",
          "default_value": "-2",
          "actual_value": "-2",
          "level": "secondary",
          "values": []
        },
        {
          "name": "target_ratio_comm_to_comp",
          "label": "target_ratio_comm_to_comp",
          "help": "Target ratio of communication overhead to computation. Only for multi-node operation and train_samples_per_iteration=-2 (auto-tuning)",
          "required": false,
          "type": "double",
          "default_value": "0.02",
          "actual_value": "0.02",
          "level": "secondary",
          "values": []
        },
        {
          "name": "seed",
          "label": "seed",
          "help": "Seed for random numbers (affects sampling) - Note: only reproducible when running single threaded",
          "required": false,
          "type": "long",
          "default_value": "random",
          "actual_value": "random",
          "level": "critical",
          "values": []
        },
        {
          "name": "adaptive_rate",
          "label": "adaptive_rate",
          "help": "Adaptive learning rate (ADADELTA)",
          "required": false,
          "type": "boolean",
          "default_value": "true",
          "actual_value": "true",
          "level": "secondary",
          "values": []
        },
        {
          "name": "rho",
          "label": "rho",
          "help": "Adaptive learning rate time decay factor (similarity to prior updates)",
          "required": false,
          "type": "double",
          "default_value": "0.99",
          "actual_value": "0.99",
          "level": "secondary",
          "values": []
        },
        {
          "name": "epsilon",
          "label": "epsilon",
          "help": "Adaptive learning rate smoothing factor (to avoid divisions by zero and allow progress)",
          "required": false,
          "type": "double",
          "default_value": "1.0E-8",
          "actual_value": "1.0E-8",
          "level": "secondary",
          "values": []
        },
        {
          "name": "rate",
          "label": "rate",
          "help": "Learning rate (higher => less stable, lower => slower convergence)",
          "required": false,
          "type": "double",
          "default_value": "0.005",
          "actual_value": "0.005",
          "level": "secondary",
          "values": []
        },
        {
          "name": "rate_annealing",
          "label": "rate_annealing",
          "help": "Learning rate annealing: rate / (1 + rate_annealing * samples)",
          "required": false,
          "type": "double",
          "default_value": "1.0E-6",
          "actual_value": "1.0E-6",
          "level": "secondary",
          "values": []
        },
        {
          "name": "rate_decay",
          "label": "rate_decay",
          "help": "Learning rate decay factor between layers (N-th layer: rate*alpha^(N-1))",
          "required": false,
          "type": "double",
          "default_value": "1.0",
          "actual_value": "1.0",
          "level": "expert",
          "values": []
        },
        {
          "name": "momentum_start",
          "label": "momentum_start",
          "help": "Initial momentum at the beginning of training (try 0.5)",
          "required": false,
          "type": "double",
          "default_value": "0.0",
          "actual_value": "0.0",
          "level": "secondary",
          "values": []
        },
        {
          "name": "momentum_ramp",
          "label": "momentum_ramp",
          "help": "Number of training samples for which momentum increases",
          "required": false,
          "type": "double",
          "default_value": "1000000.0",
          "actual_value": "1000000.0",
          "level": "secondary",
          "values": []
        },
        {
          "name": "momentum_stable",
          "label": "momentum_stable",
          "help": "Final momentum after the ramp is over (try 0.99)",
          "required": false,
          "type": "double",
          "default_value": "0.0",
          "actual_value": "0.0",
          "level": "secondary",
          "values": []
        },
        {
          "name": "nesterov_accelerated_gradient",
          "label": "nesterov_accelerated_gradient",
          "help": "Use Nesterov accelerated gradient (recommended)",
          "required": false,
          "type": "boolean",
          "default_value": "true",
          "actual_value": "true",
          "level": "secondary",
          "values": []
        },
        {
          "name": "input_dropout_ratio",
          "label": "input_dropout_ratio",
          "help": "Input layer dropout ratio (can improve generalization, try 0.1 or 0.2)",
          "required": false,
          "type": "double",
          "default_value": "0.0",
          "actual_value": "0.0",
          "level": "secondary",
          "values": []
        },
        {
          "name": "hidden_dropout_ratios",
          "label": "hidden_dropout_ratios",
          "help": "Hidden layer dropout ratios (can improve generalization), specify one value per hidden layer, defaults to 0.5",
          "required": false,
          "type": "double[]",
          "default_value": null,
          "actual_value": null,
          "level": "secondary",
          "values": []
        },
        {
          "name": "l1",
          "label": "l1",
          "help": "L1 regularization (can add stability and improve generalization, causes many weights to become 0)",
          "required": false,
          "type": "double",
          "default_value": "0.0",
          "actual_value": "0.0",
          "level": "secondary",
          "values": []
        },
        {
          "name": "l2",
          "label": "l2",
          "help": "L2 regularization (can add stability and improve generalization, causes many weights to be small",
          "required": false,
          "type": "double",
          "default_value": "0.0",
          "actual_value": "0.0",
          "level": "secondary",
          "values": []
        },
        {
          "name": "max_w2",
          "label": "max_w2",
          "help": "Constraint for squared sum of incoming weights per unit (e.g. for Rectifier)",
          "required": false,
          "type": "float",
          "default_value": "Infinity",
          "actual_value": "Infinity",
          "level": "expert",
          "values": []
        },
        {
          "name": "initial_weight_distribution",
          "label": "initial_weight_distribution",
          "help": "Initial Weight Distribution",
          "required": false,
          "type": "enum",
          "default_value": "UniformAdaptive",
          "actual_value": "UniformAdaptive",
          "level": "expert",
          "values": [
            "UniformAdaptive",
            "Uniform",
            "Normal"
          ]
        },
        {
          "name": "initial_weight_scale",
          "label": "initial_weight_scale",
          "help": "Uniform: -value...value, Normal: stddev)",
          "required": false,
          "type": "double",
          "default_value": "1.0",
          "actual_value": "1.0",
          "level": "expert",
          "values": []
        },
        {
          "name": "loss",
          "label": "loss",
          "help": "Loss function",
          "required": false,
          "type": "enum",
          "default_value": "Automatic",
          "actual_value": "Automatic",
          "level": "expert",
          "values": [
            "Automatic",
            "MeanSquare",
            "CrossEntropy"
          ]
        },
        {
          "name": "score_interval",
          "label": "score_interval",
          "help": "Shortest time interval (in secs) between model scoring",
          "required": false,
          "type": "double",
          "default_value": "5.0",
          "actual_value": "5.0",
          "level": "secondary",
          "values": []
        },
        {
          "name": "score_training_samples",
          "label": "score_training_samples",
          "help": "Number of training set samples for scoring (0 for all)",
          "required": false,
          "type": "long",
          "default_value": "10000",
          "actual_value": "10000",
          "level": "expert",
          "values": []
        },
        {
          "name": "score_validation_samples",
          "label": "score_validation_samples",
          "help": "Number of validation set samples for scoring (0 for all)",
          "required": false,
          "type": "long",
          "default_value": "0",
          "actual_value": "0",
          "level": "expert",
          "values": []
        },
        {
          "name": "score_duty_cycle",
          "label": "score_duty_cycle",
          "help": "Maximum duty cycle fraction for scoring (lower: more training, higher: more scoring).",
          "required": false,
          "type": "double",
          "default_value": "0.1",
          "actual_value": "0.1",
          "level": "expert",
          "values": []
        },
        {
          "name": "classification_stop",
          "label": "classification_stop",
          "help": "Stopping criterion for classification error fraction on training data (-1 to disable)",
          "required": false,
          "type": "double",
          "default_value": "0.0",
          "actual_value": "0.0",
          "level": "expert",
          "values": []
        },
        {
          "name": "regression_stop",
          "label": "regression_stop",
          "help": "Stopping criterion for regression error (MSE) on training data (-1 to disable)",
          "required": false,
          "type": "double",
          "default_value": "1.0E-6",
          "actual_value": "1.0E-6",
          "level": "expert",
          "values": []
        },
        {
          "name": "quiet_mode",
          "label": "quiet_mode",
          "help": "Enable quiet mode for less output to standard output",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "critical",
          "values": []
        },
        {
          "name": "max_confusion_matrix_size",
          "label": "max_confusion_matrix_size",
          "help": "Max. size (number of classes) for confusion matrices to be shown",
          "required": false,
          "type": "int",
          "default_value": "20",
          "actual_value": "20",
          "level": "critical",
          "values": []
        },
        {
          "name": "max_hit_ratio_k",
          "label": "max_hit_ratio_k",
          "help": "Max. number (top K) of predictions to use for hit ratio computation (for multi-class only, 0 to disable)",
          "required": false,
          "type": "int",
          "default_value": "10",
          "actual_value": "10",
          "level": "expert",
          "values": []
        },
        {
          "name": "balance_classes",
          "label": "balance_classes",
          "help": "Balance training data class counts via over/under-sampling (for imbalanced data)",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "expert",
          "values": []
        },
        {
          "name": "class_sampling_factors",
          "label": "class_sampling_factors",
          "help": "Desired over/under-sampling ratios per class (in lexicographic order).  If not specified, they will be automatically computed to obtain class balance during training.",
          "required": false,
          "type": "float[]",
          "default_value": null,
          "actual_value": null,
          "level": "critical",
          "values": []
        },
        {
          "name": "max_after_balance_size",
          "label": "max_after_balance_size",
          "help": "Maximum relative size of the training data after balancing class counts (can be less than 1.0)",
          "required": false,
          "type": "float",
          "default_value": "5.0",
          "actual_value": "5.0",
          "level": "expert",
          "values": []
        },
        {
          "name": "score_validation_sampling",
          "label": "score_validation_sampling",
          "help": "Method used to sample validation dataset for scoring",
          "required": false,
          "type": "enum",
          "default_value": "Uniform",
          "actual_value": "Uniform",
          "level": "expert",
          "values": [
            "Uniform",
            "Stratified"
          ]
        },
        {
          "name": "diagnostics",
          "label": "diagnostics",
          "help": "Enable diagnostics for hidden layers",
          "required": false,
          "type": "boolean",
          "default_value": "true",
          "actual_value": "true",
          "level": "critical",
          "values": []
        },
        {
          "name": "variable_importances",
          "label": "variable_importances",
          "help": "Compute variable importances for input features (Gedeon method) - can be slow for large networks",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "critical",
          "values": []
        },
        {
          "name": "fast_mode",
          "label": "fast_mode",
          "help": "Enable fast mode (minor approximation in back-propagation)",
          "required": false,
          "type": "boolean",
          "default_value": "true",
          "actual_value": "true",
          "level": "expert",
          "values": []
        },
        {
          "name": "ignore_const_cols",
          "label": "ignore_const_cols",
          "help": "Ignore constant training columns (no information can be gained anyway)",
          "required": false,
          "type": "boolean",
          "default_value": "true",
          "actual_value": "true",
          "level": "expert",
          "values": []
        },
        {
          "name": "force_load_balance",
          "label": "force_load_balance",
          "help": "Force extra load balancing to increase training speed for small datasets (to keep all cores busy)",
          "required": false,
          "type": "boolean",
          "default_value": "true",
          "actual_value": "true",
          "level": "critical",
          "values": []
        },
        {
          "name": "replicate_training_data",
          "label": "replicate_training_data",
          "help": "Replicate the entire training dataset onto every node for faster training on small datasets",
          "required": false,
          "type": "boolean",
          "default_value": "true",
          "actual_value": "true",
          "level": "expert",
          "values": []
        },
        {
          "name": "single_node_mode",
          "label": "single_node_mode",
          "help": "Run on a single node for fine-tuning of model parameters",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "critical",
          "values": []
        },
        {
          "name": "shuffle_training_data",
          "label": "shuffle_training_data",
          "help": "Enable shuffling of training data (recommended if training data is replicated and train_samples_per_iteration is close to #nodes x #rows)",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "expert",
          "values": []
        },
        {
          "name": "missing_values_handling",
          "label": "missing_values_handling",
          "help": "Handling of missing values. Either Skip or MeanImputation.",
          "required": false,
          "type": "enum",
          "default_value": "MeanImputation",
          "actual_value": "MeanImputation",
          "level": "critical",
          "values": [
            "Skip",
            "MeanImputation"
          ]
        },
        {
          "name": "sparse",
          "label": "sparse",
          "help": "Sparse data handling (Experimental).",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "expert",
          "values": []
        },
        {
          "name": "col_major",
          "label": "col_major",
          "help": "Use a column major weight matrix for input layer. Can speed up forward propagation, but might slow down backpropagation (Experimental).",
          "required": false,
          "type": "boolean",
          "default_value": "false",
          "actual_value": "false",
          "level": "expert",
          "values": []
        },
        {
          "name": "average_activation",
          "label": "average_activation",
          "help": "Average activation for sparse auto-encoder (Experimental)",
          "required": false,
          "type": "double",
          "default_value": "0.0",
          "actual_value": "0.0",
          "level": "critical",
          "values": []
        },
        {
          "name": "sparsity_beta",
          "label": "sparsity_beta",
          "help": "Sparsity regularization (Experimental)",
          "required": false,
          "type": "double",
          "default_value": "0.0",
          "actual_value": "0.0",
          "level": "critical",
          "values": []
        }
      ]
    }
  }
}
