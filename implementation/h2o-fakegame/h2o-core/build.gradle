//
// H2O Core Module
//
description = "H2O Core"

dependencies {
  // Dependency on shared model support
  compile project (':h2o-genmodel')
  // Required for h2o-core
  compile "joda-time:joda-time:2.3"
  compile "gov.nist.math:jama:1.0.3"
  compile 'org.javassist:javassist:3.18.2-GA'
  compile "org.apache.commons:commons-math3:3.3"
  compile "org.apache.directory.studio:org.apache.commons.lang:2.6"
  compile "commons-io:commons-io:2.4"
  compile "ai.h2o:google-analytics-java:1.1.2-H2O-CUSTOM"
  compile "org.eclipse.jetty.aggregate:jetty-servlet:8.1.17.v20150415"
  compile "org.eclipse.jetty:jetty-server:8.1.17.v20150415"
  compile "org.eclipse.jetty:jetty-plus:8.1.17.v20150415"
  compile ("com.github.rwl:jtransforms:2.4.0") { exclude module: "junit" }
  // For Java6 we need named groups in regexp to have nice user API
  compile "com.github.tony19:named-regexp:0.2.3"

  compile("log4j:log4j:1.2.15") { 
    exclude module: "activation" 
    exclude module: "jms" 
    exclude module: "jmxri" 
    exclude module: "jmxtools" 
    exclude module: "mail" 
  }

  // guava only needed by hadoop now, not by H2O
  compile 'com.google.guava:guava:16.0.1'
  compile 'commons-logging:commons-logging:1.1.1'
  compile 'commons-collections:commons-collections:3.0'
  compile "com.google.code.gson:gson:2.3.1"

  // org.Reflections library is replaced by H2O specific version of library which was published into Maven Central
  // In this case the library is same as library available at reflections' github repository from commit 527e8ba8851406a66376086ff81b5a44ea53b0ed
  // !! This should be replaced by regular maven dependency of reflections 0.9.11 or higher when it's available
  compile 'ai.h2o:reflections:0.9.11-h2o-custom'

  // Jets3t is required by S3N support
  // compile 'net.java.dev.jets3t:jets3t:0.6.1'

  testCompile "junit:junit:${junitVersion}"
}

apply from: "${rootDir}/gradle/dataCheck.gradle"

javadoc {
  exclude "**/fvec/C*Chunk.java/**"
  exclude "**/nbhm/**"
}

jar {
  manifest {
    attributes 'Main-Class': 'water.H2O'
  }
}

// Run a single small JVM under heavy memory load, and confirm spilling works
task testOOM(type: Exec) {
    dependsOn cpLibs, jar, testJar
    String iceRoot = project.projectDir.toString() + File.separator + "sandbox" + File.separator + "iceRoot"
            commandLine 'java', '-ea', '-Xmx1500m', '-Xms1500m', '-XX:+PrintGC', '-Dai.h2o.cleaner', '-cp',
            'build/libs/h2o-core.jar'+File.pathSeparator+'build/libs/h2o-core-test.jar'+File.pathSeparator+'../lib/*',
            'water.OOMTest', '-ice_root', iceRoot
    // This is first action for Exec task
    doFirst {
      File sandbox = new File(project.projectDir, "sandbox")
      if (sandbox.exists()) { sandbox.deleteDir() }
      sandbox.mkdir()
      FileOutputStream fos = new FileOutputStream(new File(project.projectDir, "sandbox" + File.separator +
              "water.OOMTest.out"))
      standardOutput = fos;
      errorOutput = fos;
    }
}

// The default 'test' behavior is broken in that it does not grok clusters.
// For H2O, all tests need to be run on a cluster, where each JVM is
// "free-running" - it's stdout/stderr are NOT hooked by another process.  If
// they are hooked (e.g., by the gradle driver process) then the stdout/err get
// buffered and when all CPUs are maxed out (happens over a large fraction of
// the test run) no output is visible.  If the JVMs then crash (again, common
// enough), we get NO output for the test run.  So instead we need to arrange a
// complete cluster of free-running JVMs and redirect all output (at the OS
// level) to files - then scrape the files later for test results.
test {
  dependsOn smalldataCheck, cpLibs, testMultiNode, testJar, testOOM

  // Defeat task 'test' by running no tests.
  exclude '**'
}

def buildVersionFile = new File(projectDir, "/src/main/java/water/init/BuildVersion.java");

task generateBuildVersionJava << {
  H2OBuildVersion bv = new H2OBuildVersion(rootDir, version);
  bv.emitBuildVersionJavaFileIfNecessary(buildVersionFile);
}

compileJava.dependsOn generateBuildVersionJava

task cleanBuildVersionJava(type: Delete) {
    delete buildVersionFile
}

clean.dependsOn cleanBuildVersionJava

apply from: '../gradle/javaIgnoreSymbolFile.gradle'
